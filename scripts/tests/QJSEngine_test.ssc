//
// Name: QJSEngine test
// License: GPL v2 or later
// Version: 1.0
// Author: Georg Zotti
// Description: Test critical functions during Qt6 upgrades

// Make sure infomaps are still available
core.output(core.mapToString(core.getObjectInfo("Jupiter")));

// Read a Vec3d
core.output(StelMovementMgr.getViewDirectionJ2000());
core.output(typeof StelMovementMgr.getViewDirectionJ2000()); // this returns "object". Is it still a Vec3d?
core.output(typeof StelMovementMgr.getViewDirectionJ2000().toQVector3D());

var dir=StelMovementMgr.getViewDirectionJ2000().toQVector3D(); // does not work, functions of object Vec3d are unknown. (Vec3d not a QObject...)
core.output(dir);
core.output(typeof dir);


var dir=StelMovementMgr.getViewDirectionJ2000(); 
core.output(dir);
core.output(typeof dir); // object
//core.output("dir is an Array? " + dir.isArray()); // array? JS error: not a function
//core.output("dir is an Array? " + dir.className()); // array? JS error: not a function
var dirstr=""+dir;
core.output(dirstr);
core.output(typeof dirstr); // string
var dirArray=JSON.parse(dir);
core.output(dirArray);
core.output(typeof dirArray); // reports "object". May be an array now!
//core.output("dirArray is an array: " + dirArray.isArray()); // No, still no JS Array!
core.output(dirArray[0]);
core.output(dirArray[1]);
core.output(dirArray[2]);
/////////////////////////////////////

// Test a conversion of a Vec3d into a V3d, and how to use the V3d then.

var dir=StelMovementMgr.getViewDirectionJ2000(); 
var dirV3d=core.toV3d(dir); // Does not work properly!
core.output("dirV3d:" + dirV3d);
core.output("typeof dirV3d:" + typeof dirV3d);
core.output("dirV3d.x" + dirV3d.x());
core.output("dirV3d.y" + dirV3d.y());
core.output("dirV3d.z" + dirV3d.z());
core.output("dirV3d.r" + dirV3d.r());
core.output("dirV3d.g" + dirV3d.g());
core.output("dirV3d.b" + dirV3d.b());
core.output("dirV3d.toVec3d() [weird converted string return]" + dirV3d.toVec3d());

// Test a conversion of a Vec3d into an independently named new V3d, and how to use the V3d then.

// There are several versions to operate with Vec3d:
// You can retrieve it from the program:
//var dir=StelMovementMgr.getViewDirectionJ2000(); 
// A simple core.output(dir) "looks" like an array, and is everything needed for data output.
// If you need access to its internals, there are several options.
//var dirV3d=core.createNamedV3d("dirV3d", dir);
//core.createNamedV3d("dirV3d", dir); // does the same, the name is defined in the JSEngine global namespace.
// This creates a variable dirV3d that can be accessed with the public slots of V3d.
// The cleanest use looks like:
//var dirV3d=new V3d(dir);

// THIS BLOCK SHOULD WORK:

var dir=StelMovementMgr.getViewDirectionJ2000(); 
//var dirV3d=core.createNamedV3d("dirV3d", dir);
//core.createNamedV3d("dirV3d", dir);

var dirV3d=new V3d(dir);

core.output("dircV3d:" + dirV3d);
core.output("typeof dirV3d:" + typeof dirV3d);
core.output("dirV3d.x " + dirV3d.x());
core.output("dirV3d.y " + dirV3d.y());
core.output("dirV3d.z " + dirV3d.z());
core.output("dirV3d.r " + dirV3d.r());
core.output("dirV3d.g " + dirV3d.g());
core.output("dirV3d.b " + dirV3d.b());
core.output("dirV3d.toVec3d() [weird converted string return]" + dirV3d.toVec3d());

////////////////////////////////////

core.output(StelMovementMgr.getViewDirectionJ2000()[0]);
core.output(StelMovementMgr.getViewDirectionJ2000()[1]);
core.output(StelMovementMgr.getViewDirectionJ2000()[2]);

var dir3D=StelMovementMgr.getViewDirectionJ2000().toQVector3D();

// Attempt to set and re-read a Vec3d. 
// It seems setting does some bogus.
// With the attempted String->Vec converter in StelCore this fails with an error message.
StelMovementMgr.setViewDirectionJ2000([0.730694, 0.129957, 0.670222]);
core.output(StelMovementMgr.getViewDirectionJ2000());

// Try with an explicit QVector3D in the core object
core.setViewDirection(core.vec3d(0.730694, 0.129957, 0.670222));
// This output is suboptimal...
core.output(core.getViewDirection());

core.output(core.vec3d(0.730694, 0.129957, 0.670222));
core.output(typeof core.vec3d(0.730694, 0.129957, 0.670222));

core.output([12.3,45.6,78.9]);
core.output(typeof [12.3,45.6,78.9]);
core.output([12.3,45.6,78.9].name);
core.output([12.3,45.6,78.9]);

// Reset view direction to allow continuous operation
StelMovementMgr.lookNorth(true);
core.output(StelMovementMgr.getViewDirectionJ2000());


console.log("blabla");

var dir3D=StelMovementMgr.getViewDirectionJ2000();
core.output(dir3D);

// Attempt with the new V3d class which may act as intermediate thing. Not sure how to bring auto-conversion to work correctly! 
var mydir=new V3d(0.730694, 0.129957, 0.670222);
core.output(mydir);
core.output(mydir.x());
core.output(mydir.y());
core.output(mydir.z());
StelMovementMgr.setViewDirectionJ2000(mydir.toVec3d()); // This seems to work!!!!
core.output(StelMovementMgr.getViewDirectionJ2000());

StelMovementMgr.setViewDirectionJ2000(new V3d(0., 1., 0.).toVec3d()); // This seems to work!!!!
core.output(StelMovementMgr.getViewDirectionJ2000());
